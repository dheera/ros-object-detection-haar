#!/usr/bin/env python

import cv2
import numpy as np
import cv_bridge
import json
import os
import rospy
import time

from std_msgs.msg import String
from sensor_msgs.msg import Image

PATH = os.path.dirname(__file__)

class ObjectDetectHaarNode(object):
    def __init__(self):
        rospy.init_node('object_detect_haar_node')
        self.param_topic_image = rospy.get_param("~topic_image", "image_raw")
        self.param_topic_detections = rospy.get_param("~topic_detections", "detections")
        self.param_cascade = rospy.get_param("~cascade", "haarcascade_frontalface_default.xml")
        self.param_rate = rospy.get_param("~rate", 15)
        self.cascade = cv2.CascadeClassifier(os.path.join(PATH, "haar", self.param_cascade))
        self.sub_image = rospy.Subscriber(self.param_topic_image, Image, self.on_image, queue_size = 1)
        self.pub_detections = rospy.Publisher(self.param_topic_detections, String, queue_size = 1)
        self.last_msg = None

    def on_image(self, msg):
        self.last_msg = msg

    def spin(self):

        rate = rospy.Rate(self.param_rate)

        while not rospy.is_shutdown():
            rate.sleep()
            if self.last_msg is None:
                rospy.logwarn_throttle(2, "no image")
                continue

            try:
                t = time.time()
                image = cv_bridge.imgmsg_to_cv2(self.last_msg, "bgr8")
                self.last_msg = None
                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                detections = self.cascade.detectMultiScale(gray, 1.2, 5)

                m = String()
                detections_v = [
                    [
                        float(x) / image.shape[0],
                        float(y) / image.shape[1],
                        float(w) / image.shape[0],
                        float(h) / image.shape[1],
                    ] for (x,y,w,h) in detections]
                m.data = json.dumps(detections_v)
                self.pub_detections.publish(m)

            except ValueError:
                rospy.logwarn_throttle(2, "object detection error")


if __name__ == "__main__":
    node = ObjectDetectHaarNode()
    node.spin()
